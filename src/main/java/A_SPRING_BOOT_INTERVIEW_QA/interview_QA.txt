RUNNING JAVA APP FROM CLI:
java -jar sample.jar -Dspring.profiles.active=QA

HOW TO PACKAGE JAR :
We can package either in to JAR or WAR by mentioning as below

<packaging>jar/war</packaging>

Using Spring boot maven plugin:
Ex:
-----
<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>


ACTUATOR & ITS USES:
Actuation gives us REST like response without actually adding any endpoints in our app

Just add "spring-boot-starter-actuator" to POM file like below
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

Used for checking Health, metrics, beans information etc.,

In application.properties:
--------------------------
management.endpoint.web.exposure.include=env

Here we have multiple options to specify, below are some of them

/env -> returns listing properties in app
/health -> returns health of the app
/auditevent -> returns autoconfiguration related candidates
/beans -> Returns list of all spring beans in our app
/trace -> trace


CORS: CROSS ORIGIN RESOURCE SHARING

At controller level:
------------------
@CrossOrigin(origins="*", allowedHeaders="*")
@RestController

At endpoint level:
------------------
@CrossOrigin(origins="*", allowedHeaders="*")
@GetMapping

To Enable CORS for whole application:

@Configuration
@EnableWebMvc
public class CorsConfig implements WebMvcCon figurer{
    @override
    public void addCors(CorsRegistry registry){
        registry.addMapping("/**")
                .allowedMethods("GET", "POST");
    }
}


DIFF B/W @CONTROLLER & @RESTCONTROLLER

RESTCONTROLLER = CONTROLLER + RESPONSEBODY

If we just give @Controller
Its not possible send raw JSON or XML formats directly, we also have to add @ResponseBody at method level

@Controller
@RequestMapping("/api")
public class Sample{

@GetMapping
@ResponseBody
public List<POJOOBJ> getPOJO(){
}

}

But No need of doing it with @RestController.


HOW TO CHANGE JAR filename:

In the build section above maven plugins

<finalName>custom-app</finalName>




#Which is better for storing password ? char[] or String
ans: char[]
Explanation: If we store in STRING then it will be stored in STRING CONSTANT POOL(SCP). So, GARBAGE COLLECTOR(GC) will not go to SCP so frequently.
For GC to perform cleanup activity, JVM needs to be restarted. So There's a high chance that STRING LITERAL stays longer in SCP
resulting in SECURITY THREAT and can also access by people who have MEMORY DUMP ACCESS



# MARKER INTERFACE
Also called TAGGING INTERFACE.
It's an interface with ZERO methods.
It provides RUN-TIME TYPE INFORMATION about the objects in java so that COMPILER & JVM will be notified (or) will be aware of additional info about the object.
if(obj instanceof Markerinterface){
    // perform operations
}

Ex: AutoClosable and Cloneable are marker interfaces.
classes support "Try with resources" must implement "AutoClosable" interface
classes which implements Serializable supports serialization mechanism.
classes which implements "Cloneable" interface supports cloning ex: Employee e = new Employee(); Employee clonedEmp = (Employee)e.clone();

AutoConfiguration? How to Enable or Disable a Certain Configuration?
--------------------------------------------------------------------

scans classpath(src/main/java (or) src/main/resources) for libraries and applies configuration accordingly on its own.
Autoconfiguration works with the help of @Conditional annotations
 => @ConditionalOnBean and,
 => @ConditionalOnClass.

@Conditional â€“ annotations such as @ConditionalOnBean, @ConditionalOnWebApplication or
@ConditionalOnClass allow to register a bean only when the condition is met.

 To enable an autoconfiguration, just import correct starter dependency
 To Disable

 @EnableAutoConfiguration(exclude = DataSourceAutoConfiguration.class)
 public class MyConfiguration {
 }

Starter dependencies:
---------------------
These are maven templates which contain collection of transitive or interdependent dependencies.
For ex:
For a web based app, just add "spring-boot-starter-web" alone
It transitively brings all the other required dependencies like spring-webmvc, spring-web, hibernate-validator,
tomcat-embed-core, tomcat-embed-el, tomcat-embed-websocket, jackson-databind, jackson-datatype-jdk8, jackson-datatype-jsr310

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>



Diff b/w FAIL FAST and FAIL SAFE iterators:
-------------------------------------------
FAIL FAST:
---------
List list = new ArrayList();
Iterator iterator = list.iterator();

while(iterator.hasNext()){
    sout(itr.next());
    list.add("extra item"); // Throws CONCURRENT MODIFICATION EXCEPTION
    // because the iterator maintains a MOD_COUNT, so if MOD_COUNT changes it throws the ERROR
}

FAIL SAFE:
----------
List list = new CopyOnWriteArrayList();
Iterator iterator = list.iterator();
while(iterator.hasNext()){
    sout(itr.next());
    list.add("extra"); // Does not throw error, even if MOD_COUNT is changes as this works on COPY of the list.
}

Examples are CopyOnWriteArrayList, CopyOnWriteArraySet, ConcurrentHashMap


HOW TO MAKE SYNCHRONIZED LIST:
-----------------------------
Collections.synchronizedList(list);

@Autowired:
-----------

Used for Dependency Injection.

@Qualifier:
----------

If we have multiple implementations for a single INTERFACE

Spring doesn't know which implementation to inject/consider, so it throws "Unsatisfied" dependency expressed through field <fieldname>

so we use @Qualifier along with @Autowired

@Autowired
@Qualifier("beanname")


INJECT Dynamic bean name:
----------------------------

In App.properties:
------------------
paymentBeanName= phonepe

At class level use

@Service
@PropertySource("classpath:application.properties")
public class PaymentServiceImpl{

    @Resource( name = "${paymentBeanName}" ) // phonepe will be injected @Qualifier("${paymentBeanName}") -> will not work so go with @Resource
    private Payment payment;

}

EXCEPTION HANDLING WITH CONTROLLER ADVICE:
------------------------------------------

@RestControllerAdvice
public class ControllerAdviceDemo{

       @ExceptionHandler(StudentNotFound.class)
       public CustomErrorMessageDto handleStudentException(StudentNotFound snf){
                CustomErrorMessageDto cemd = CustomErrorMessageDto.build(snf.getErrorMessage(),....);
       }
}


@Value:
-------

app.props:
mail.name = smptp
mail.pwd = pwds

In class, we can access as

@Value("${mail.name}")
private String name;

@PropertySource:
----------------

The default property file which spring boot refers is application.properties file.
But we can choose which file to be referred or from which file properties to be accessed.

@Component
@PropertySource("classpath: props/custom.properties")
public class PropertySourceDemo{

   @Value("${custom.mail}") // custom.mail will be referred from  "props/custom.properties" file
   private String email;

}


@ConfigurationProperties:
-------------------------
If we have multiple properties, We can map all the properties to a DTO based on a "prefix"

app.props:
----------
mail.name = ssr
mail.email = ssr@gg.in

@ConfigurationProperties(prefix="mail")
public class ConfigPropsDemo{
    private String name;
    private String email;
}


@RequestBody:
-------------

Helps us in Deserializing and mapping json to java DTO/POJO for the input/payload coming from the client.

VALIDATION USING @VALID:
------------------------

@NotNull(message= "Name cannot be null")
@NotBlank
@Email
@Min(value = 10)
@Max(value = 30)
@Pattern(regExp="", message = "Invalid phone number")

SPRING BOOT ADVANTAGES:
-----------------------

Dependency Resolution using spring boot starters
Rapid Application Development
Embedded Server(Tomcat)(Starter WEB contains TOMCAT server by default)
We can also exclude default SERVER & configure a diff server also like below

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>spring-boot-starter-tomcat<exclusion>
    </exclusions>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>

Actuator -> Gives REST like endpoints like /env, /health, /metrics, /beans out of the box just by adding spring boot actuator starter

BEAN SCOPES:
------------

Scope = Singleton -> By default spring boot has it -> Only single object per IOC will be created & shared across app
Scope = ProtoType -> New object gets created on every request.

What does POM.XML CONTAIN:
--------------------------
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.0.2</version>
<parent>

RUNNING JAVA APP:
------------------
mvn spring-boot:run -> This does not create a JAR in fact it goes directly to target/classes/MainApplication.java and executes it directly from there internally.



@SpringBootApplication:
-------------------------

Spring boot scans all the packages which are aligned with "src" folder and its sub packages. But if the packages are external to our MainApp.java class
those packages will not be scanned by default.

we achieve it by @SpringBootApplication(scanBasePackages="com.business.common")

Combination of @EnableAutoConfiguration, @SpringBootConfiguration & @ComponentScan

@EnableAutoConfiguration: -> Internally it's a Configuration class
------------------------------------------------------------------
If we add "debug=true" in app.props file and start the app it shows "Positive matches" and "Negative Matches" in the console.
"Positive matches":
Positive matches are identified by classes which are available on classpath with @ConditionalOnClass(SomeClass.class)
Ex:
If SomeClass is available in our dependencies tree which are sub-dependencies downloaded as part of POM dependencies.
These matched will be autoconfigured while negative are neglected.

Scans all the dependencies in the POM, classpath and properties in app.properties and configures required functionality required for the app
It allows registering of Configuration classes that we define in app ex: RestTemplate, Swagger, Security related etc.,

For Ex:
If we add spring-boot-starter-jpa

Under Positive Matches:
We will have "DataSourceAutoConfiguration.java" so If we go inside it, we'll have

@ConditionalOnClass({ DataSource.class, EmbeddedDataType.class}) // For DataSourceAutoConfiguration.java Autoconfiguration will be
enabled only if either of "DataSource.class, EmbeddedDataType.class" are present.
@ConditionalOnMissing
@EnableConfigurationProperties(DataSourceProperties.class) // Inside DataSourceProperties.java we'll have @ConfigurarionProperties(prefix="spring.dataSource")

@ConditionalOnClass({ SomeClass.class, ....}) // Only if it is present, then autoconfigure
@ConditionalOnMissing( { SomeClass.class,....})// Only if it is missing, then autoconfigure


SPRING BOOT RUN METHOD INTERNALS:
---------------------------------

Creates ApplicationContext (Servlet/Reactive/Default)
Creates a Banner
Loads all annotated classes and
starts Embedded Tomcat Server


COMMANDLINERUNNER:
-------------------

It is a functional interface containing run() method
Used for performing preprocessing logics like DB connections/ DB initial records insertion etc..,
Will be executed after the SpringBootApplication.run() method.

CREATING A BEAN:
----------------

-> Using @Component
@Component
public class UserService{}

-> Using External configuration
@Configuration
public class UserService{

    @Bean
    public UserService userService(){ // userService bean will be created and will be maintained by SPRING
        return new UserService();
    }
}

STEREOTYPE ANNOTATIONS:
------------------------
@Component, @Service, @Repository, @Controller, @RestController etc..,


DEPENDENCY INJECTION(DI):
------------------------

Key feature of Spring Framework.
DI is a Design pattern in spring framework which helps in achieving loose coupling between classes.
Injecting dependency in to a dependant class using @Autowired annotation. Thus, Spring handles creation its life cycle from creation to destruction.

TYPES OF DI:
-------------

// Field level
@Autowired
Private UserService userService;

// Setter DI
@Autowired
public void setUserService(UserService userService)
{
    this.userService = userService();
}

// Constructor DI
@Autowired
public UserService(UserService userService)
{
    this.userService = userService();
}

NOTE:
-----
With Constructor DI, If 2 beans are dependent on each other, then, "Circular Dependency" will occur
So We use Setter DI along with @Lazy annotation


COMMANDLINERUNNER ALTERNATIVE:
--------------------------------

@SpringBootApplication
public class MainApp implements CommandLineRunner
{
    @PostConstruct
    public void initDbQueries(){
        sout("Inserted records in PostConstruct");
    }

    p s v m(String[] args){
        sout("Main run()");
    }

    @Override
    public void run(){
        sout("command line runner run()");
    }

}

O/p:
Main run()
Inserted records in PostConstruct
command line runner run()

ALTERNATIVE TO @VALUE:
-----------------------

@Autowired
private Environment environment; // By Spring core

sout(environment.getProperty("mail.username"));


Difference b/w App.props & App.YML:
-----------------------------------

YML is more READABLE
YML reduces boilerplate code

LOAD EXTERNAL PROPERTIES:
-------------------------

In App.props:
spring.config.import = file:/users/ssr/Desktop/test.properties

@Configuration
@ConfigurationProperties(prefix="spring.datasource")

RESOLVE BEAN DEPENDENCY AMBIGUITY:
-----------------------------------

Using
 @Qualifier("beanName") // Spring specific
 @Resource(name = "beanName") // Directly by java
 @Primary


BEAN SCOPES:
-----------

Standalone & Web based:
-----------------------
Singleton: // Usage: @Scope("singleton")
    Creates a single instance of bean for entire application context.
    Default scope for Spring bean.
    Single instance will be shared across all clients which requests it.
    Ex:
    ----
    @Component
    public class SingletonDemo
    {
        public SingletonDemo(){
            sout("Singleton bean created!!!");
        }
    }

    In MainApp.java:
    ---------------
    @SpringBootApplication
    public class MainApp
    {
        p s v m(Str[] args){
            ConfigurableApplicationContext context = SpringBootApplication.run();

            SingletonDemo sd1 = context.getBean(SingletonDemo.class);
            SingletonDemo sd2 = context.getBean(SingletonDemo.class);
            SingletonDemo sd3 = context.getBean(SingletonDemo.class);
            SingletonDemo sd4 = context.getBean(SingletonDemo.class);

        }
    }
    O/p: Singleton bean created!!!
    Note: Only one instance will be created.
Prototype
WebSocket

Web based apps:
--------------
Request
Session
Application

Difference between @RequestMapping and @GetMapping?
-----------------------------------------------------
@GetMapping = @RequestMapping(method = { RequestMethod.GET }, consumes = {MediaType.Application/json}, produces = {MediaType.Application/json})


Diff b/w comparable and comparator:
------------------------------------
Comparable
-> Has only 1 method -> compareTo(Object o)
-> Can only help in comparing single field

Comparator
-> Has compare(Object o1, Object o2) and other handy default methods and static methods which helps
in ordering and chaining conditions or comparators like .thenComparing() etc..,
-> Can compare multiple fields or chain multiple comparators


Comparator has static methods like Comparator.comparing(), Comparator.comparingDouble() etc.., which intern returns Comparator object.

Ex:
(o1, o2) -> o1.getName().compareTo(o2.getName())
Comparator.comparingDouble(Employee::getSalary)
Comparator.comparing(Employee::getSalary)






application.properties:
------------------------
spring.sql.init.mode = always
It is used to control the execution of schema.sql files during application startup.


JdbcTemplate:
-------------

methods:

query() : SQL SELECT stmt map each row of ResultSet to a java object and return List<Object>

queryForObject(): SQL SELECT stmt which returns a single row and maps that row to java obj.

update(): modifies data such as UPDATE, DELETE, INSERT

execute(): executes a sql stmt and optionally returns a result set.


query():
------------
signature: query(sql, RowMapper<T> rowMapper)

Custom RowMapper:
-----------------
public class EmployeeRowMapper implements RowMapper<Employee> {

    @Override
    public Employee mapRow(ResultSet rs, int rowNum){
           return new Employee(
                rs.getInt("Id"),
                rs.getString("name")
                ....
                ....
           );
    }

}

Usage:
----------
@Autowired
private JdbcTemplate jdbcTemplate;

String sql = "SELECT * from employees";
List<Object> employeeList = jdbcTemplate.query(sql, new EmployeeRowMapper());

Instead of passing "new EmployeeRowMapper()" as a 2nd param (Anonymous inner class implementation):
--------------------------------------------------------------------------------------------------
we can go with jdbcTemplate.query(sql, new RowMapper<Employee>(){

        @Override
        public Employee mapRow(ResultSet rs, int rowNum){
               return new Employee(
                    rs.getInt("Id"),
                    rs.getString("name")
                    ....
                    ....
               );
        }

});

Also,

Using Lambda expression:
--------------------------
    jdbcTemplate.query(sql, (ResultSet rs, int rowNum) -> new Employee(rs.getInt("Id"),rs.getString("name")));

jdbcTemplate.queryForObject("select * from book where id = ?", new BookMapper(), bookId);

jdbcTemplate.update("insert into book(name, imageUr) values (?,?)", bookName, bookImageUrl);
jdbcTemplate.update("update book set name = ? where id = ?",bookName, bookId);
jdbcTemplate.update("DELETE book where id = ?",bookId);










Streams:

Maximum salaried employee:
Optional<Employee> employee = employeesList.stream()
    .max(Comparator.comparingDouble(Employee::getSalary));

Largest number:
numbersList.stream()
    .mapToInt(num -> num)
    .max()
    .ifPresent(num -> sout("Largest num is "+ num);

1) List<List<Integer>>, flatten it into a single List<Integer>
List<List<Integer>> listOfLists = Arrays.asList(
    Arrays.asList(1, 2, 3),
    Arrays.asList(4, 5),
    Arrays.asList(6, 7, 8)
);

List<Integer> flattenedList = listOfLists.stream()
                                         .flatMap(List::stream)
                                         .collect(Collectors.toList());

System.out.println(flattenedList); // Output: [1, 2, 3, 4, 5, 6, 7, 8]

2) Count the occurrences of each word in a list and store the result in a Map<String, Long> using Java Streams.
List<String> words = Arrays.asList("apple", "banana", "apple", "orange", "banana", "apple");

          words.stream().collect(Collectors.groupingBy(Function::identity, Collectors.counting());

3) Given a list of strings, convert each string to uppercase and filter out strings containing the letter 'a'.

strList.stream()
    .filter(str -> str.contains("a"))
    .map(String::toUpperCase)
    .collect(Collectors.toList());

4) Sort a list of integers in descending order and select the top 3 numbers.

list.stream()
    .sorted(Comparator.reverseOrder())
    .limit(3)
    .collect(Collectors.toList());

5) Highest salary from a list of Employee

    employeeList.stream()
        .max(Comparator.comparingDouble(Employee::getSalary))
        .get();

     employeeList.stream()
        .sorted(Comparator.comparing(Employee::getSalary).reversed())
        .findFirst()
        .get();


6) Maximum number
    Stream.of(1,5,7,3)
        .mapToInt(num -> num)
        .max()
        .getAsInt();

        Like max(), we have min(), sum(), and summaryStatistics()

     Stream.of(1,4,3,6,9)
        .sorted(Comparator.reverseOrder())
        .findFirst()
        .get()

 7) 2nd Highest salaried Female in HR dept

    employeeList.stream()
        .filter(emp -> "Female".equals(emp.getGender()) && "HR".equals(emp.getDept()))

        .max(Comparator.comparingDouble(Employee::getSalary)).get();
                    (OR)
        .sorted(Comparator.comparingDouble(Employee::getSalary).reversed()).skip(1).findFirst().get();

8) Head count of Employees by gender

    Map<String, Long> hc = employeeList.stream()
        .collect(Collectors.groupingBy(Employee::getGender, Collectors.counting()))


    employeeList.stream()
        .collect(Collectors.groupingBy(Employee::getGender, Collectors.collectingAndThen(
                Collectors.toList(),
                list -> list.size()    // can also be written as List::size
        )));

9) Count of MALE and FEMALE employees in each department

    employeeList.stream()
             .collect(Collectors.groupingBy(Employee::getDept, Collectors.groupingBy(
                    Employee::getGender,
                    Collectors.counting()
            ));

            (OR)

    employeeList.stream()
            .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                Collectors.toList(),
                list -> list.stream()
                            .collect(Collectors.groupingBy(Employee::getGender, Collectors.counting())
            )));

10) 3rd highest salaried from each department

    Map<String, Employee> thirdHighest = employeeList.stream()
            .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                    Collectors.toList(),
                    list -> list.stream()
                            .sorted(Comparator.comparingDouble(Employee::getSalary).reversed())
                            .skip(2)
                            .findFirst().get()
            )));

11) 3rd, 4th and 5th highest salaried from each dept

    employeeList.stream()
            .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                    Collectors.toList(),
                    list -> list.stream()
                                .sorted(Comparator.comparing(Employee::getSalary).revered())
                                .skip(2)
                                .limit(3)
                                .collect(Collectors.toList());
            )));



13)  Average salary of employees

       IntStream.range(1,10)
                .average(); // sum(), min(), max(), distinct(), also summaryStatistics()

    employeeList.stream()
            .collect(Collectors.averagingDouble(Employee::getSalary));

14) Primitive Stream to Wrapper Stream

    IntStream.range(1,10)
                .boxed() // Stream<Integer>
                .collect(Collectors.toList());


15) Avg salary of employees in HR dept

    employeeList.stream()
                .filter(emp -> "Hr".equals(emp.getDept()))
                .collect(Collectors.averagingDouble(Employee::getSalary));

 12) Maximum salaried employee in Each Department

             employeeList.stream()
                     .collect(Collectors.groupingBy(Employee::getDept, Collectors.maxBy(Comparator.comparing(Employee::getSalary));

                     (OR)
             employeeList.stream()
                     .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                                 Collectors.toList(),
                                 list -> list.stream().max(Comparator.comparing(Employee::getSalary))
                     )));

16) Avg Sal of emp in each dept

       employeeList.stream()
                   .collect(Collectors.groupingBy(Employee::getDept, Collectors.averagingDouble(Employee::getSalary)));

       employeeList.stream()
                    .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                            Collectors.toList(),
                            list -> list.stream()
                                        .collect(Collectors.averagingDouble(Employee::getSalary))
                                                (or)
                                    list.stream()
                                        .mapToDouble(Employee::getSalary)
                                        .average()
                    )))



 17) Average salary of Female employees in each dept

               employeeList.stream()
                            .filter(emp -> emp.getGender().equals("F"))
                            .collect(Collectors.groupingBy(Employee::getDept, Collectors.averagingDouble(Employee::getSalary));

               employeeList.stream()
                            .filter(emp -> "F".equals(emp.getGender()))
                            .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                                           Collectors.toList(),
                                           list -> list.stream()
                                                    .collect(Collectors.averagingDouble(Employee::getSalary))
                                                            (or)
                                                    list.stream()
                                                        .mapToDouble(Employee::getSalary)
                                                        .average()
                            )))


  18) Average salary of Male and Female employees in each dept

        employeeList.stream()
                    .collect(Collectors.groupingBy(Employee::getDept,
                                    Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::salary))
                    ))

        employeeList.stream()
                    .collect(Collectors.groupingBy(Employee::getDept, Collectors.collectingAndThen(
                            Collectors.toList(),
                            list -> list.stream()
                                        .collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary))
                    )))

    19) Find the oldest employee's name

           employeesList.stream()
                        .sorted(Comparator.comparingInt(Employee::getAge).reversed())
                        .findFirst()
                        .get()
                        .getName();

     20) Find the highest averaged salaried department

        Map<String, Double> emps = employeeList.stream()
                    .collect(Collector.groupingBy(Employee::getDept, Collectors.maxBy(Collectors.averagingDouble(Employee::getSalary)));

        emps.values().stream().flatMap(list -> list.stream().max(Comparator.reverseOrder()).get()



Spring data jpa Relationships:
-----------------------------
oneToMany:
--------------

Invoice, LineItem

The table in which we will have the "foreign key" is the "owning side".

Invoice:
---------
@OneToMany(mappedBy = "invoice", cascade = CascadeType.ALL)
private List<LineItem> lineItems;

LineItem:
--------
@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name = "invoice_urn")
private Invoice invoice;


@ManyToMany:
------------





Access Modifiers:
-----------------

Public: Accessible anywhere.
private : Within class.
protected: Accessible within PACKAGE and outside package also through SUBCLASSES.
default: Accessible only within package but not through SUBCLASSES.



Design Patterns in java:
------------------------

Creation DP's:
--------------



Structural DP's:
---------------







Diamond Problem in java 8:
-------------------------














